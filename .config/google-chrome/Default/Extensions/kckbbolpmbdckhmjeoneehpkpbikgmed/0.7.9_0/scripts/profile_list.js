// Generated by CoffeeScript 1.8.0
(function() {
  var ProfileList, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ProfileList = (function(_super) {
    __extends(ProfileList, _super);

    ProfileList.prototype.events = {
      "click #add_proxy_button": "addProfile",
      "click .mochi_radio": "selectProfile",
      "click .edit": "editProfile"
    };

    function ProfileList() {
      this.remove = __bind(this.remove, this);
      this.selectProfile = __bind(this.selectProfile, this);
      this.addProfile = __bind(this.addProfile, this);
      this.add = __bind(this.add, this);
      this.render = __bind(this.render, this);
      ProfileList.__super__.constructor.apply(this, arguments);
      Profile.bind("change refresh", this.render);
    }

    ProfileList.prototype.render = function() {
      var proc;
      proc = [];
      Profile.each((function(_this) {
        return function(p) {
          if (_this.el.find('.profile[name="' + p.name + '"]').length === 0) {
            return proc.push(function() {
              return _this.add(p, function() {
                return $(window).dequeue('profile');
              });
            });
          }
        };
      })(this));
      proc.push((function(_this) {
        return function() {
          var pi, ps, _i, _len;
          ps = _this.el.find('.profile');
          for (_i = 0, _len = ps.length; _i < _len; _i++) {
            pi = ps[_i];
            if (Profile.getByName($(pi).attr('name')).length === 0) {
              $(pi).attr('delete', true);
            }
          }
          _this.el.find('.profile[delete]').remove();
          return $(window).dequeue('profile');
        };
      })(this));
      proc.push((function(_this) {
        return function() {
          var pf, pi, ps, _i, _len;
          ps = _this.el.find('.profile');
          pf = [];
          for (_i = 0, _len = ps.length; _i < _len; _i++) {
            pi = ps[_i];
            if (pf.indexOf($(pi).attr('name')) !== -1) {
              $(pi).remove();
            } else {
              pf.push($(pi).attr('name'));
            }
          }
          return $(window).dequeue('profile');
        };
      })(this));
      proc.push((function(_this) {
        return function() {
          _this.el.find('.profile').show();
          return $(window).dequeue('profile');
        };
      })(this));
      $(window).queue('profile', proc);
      return $(window).dequeue('profile');
    };

    ProfileList.prototype.add = function(profile, callback) {
      var selected;
      selected = localStorage.getItem('selected');
      return this.sandbox.mandate('render', {
        tmpl: 'profile',
        data: profile.toTemplateMapping()
      }, (function(_this) {
        return function(result) {
          _this.el.prepend(result);
          if (profile.name === selected) {
            _this.el.find('.mochi_radio[value="' + profile.name + '"]').attr('checked', true).prop('checked', true);
          }
          return callback();
        };
      })(this));
    };

    ProfileList.prototype.addProfile = function(event) {
      app.profileDetail.reset();
      app.profileDetail.show();
      return this.hide();
    };

    ProfileList.prototype.selectProfile = function(event) {
      var btn, p;
      btn = $(event.currentTarget);
      p = Profile.getByName(btn.val());
      if (p.length === 0) {
        return;
      } else {
        p = p[0];
      }
      if (btn.prop('checked')) {
        localStorage.setItem("selected", btn.val());
        if (app.state) {
          Agent.enable(p.name);
        }
        return this.parentCtrl.updateProxyStatus();
      }
    };

    ProfileList.prototype.editProfile = function(event) {
      var btn, p;
      btn = $(event.currentTarget);
      p = Profile.getByName(btn.attr('href').substring(1))[0];
      app.profileDetail.setProfile(p);
      app.profileDetail.show();
      return this.hide();
    };

    ProfileList.prototype.remove = function(profile) {
      this.el.find("profile[name=" + profile.name + "]").remove();
      return Profile.destroy(profile.id);
    };

    ProfileList.prototype.getCurrent = function() {
      var name;
      name = this.el.find('.mochi_radio:checked').val();
      return name;
    };

    ProfileList.prototype.setPingText = function(name, text) {
      return $(".mochi_list_item[name=\"" + name + "\"]").find('.ping').text(text);
    };

    ProfileList.prototype.setRateText = function(name, text) {
      return $(".mochi_list_item[name=\"" + name + "\"]").find('.rate').text(text);
    };

    ProfileList.prototype.show = function() {
      return $('#profile_list_page').slideDown();
    };

    ProfileList.prototype.hide = function() {
      return $('#profile_list_page').slideUp();
    };

    return ProfileList;

  })(Spine.Controller);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ProfileList = ProfileList;

}).call(this);
