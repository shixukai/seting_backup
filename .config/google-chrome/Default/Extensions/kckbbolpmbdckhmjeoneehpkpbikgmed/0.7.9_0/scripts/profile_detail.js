// Generated by CoffeeScript 1.8.0
(function() {
  var ProfileDetail, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ProfileDetail = (function(_super) {
    __extends(ProfileDetail, _super);

    ProfileDetail.prototype.events = {
      "click .detail_delete_button": "deleteProfile",
      "click .detail_save_button": "save",
      "click .detail_cancel_button": "discard",
      "click .proxy_type_button_group a": "switchProxyType",
      "click .auth_proxy_toggle": "switchAuth"
    };

    ProfileDetail.prototype.elements = {
      ".action_id": "actionId",
      ".proxy_name_entry": "proxyNameEntry",
      ".proxy_type_button_group": "proxyTypeButtonGroup",
      ".pac_url_entry": "pacUrlEntry",
      ".scheme_combo": "schemeCombo",
      ".host_entry": "hostEntry",
      ".port_entry": "portEntry",
      ".bypass_entry": "bypassEntry",
      ".auth_proxy_toggle": "authToggle",
      ".auth_proxy_block": "authBlock",
      ".username_entry": "usernameEntry",
      ".password_entry": "passwordEntry",
      ".detail_delete_button": "deleteButton"
    };

    function ProfileDetail() {
      this.discard = __bind(this.discard, this);
      this.save = __bind(this.save, this);
      this.switchAuth = __bind(this.switchAuth, this);
      this.deleteProfile = __bind(this.deleteProfile, this);
      this.switchProxyType = __bind(this.switchProxyType, this);
      this.render = __bind(this.render, this);
      ProfileDetail.__super__.constructor.apply(this, arguments);
    }

    ProfileDetail.prototype.render = function() {
      return this.el.empty();
    };

    ProfileDetail.prototype.switchProxyType = function(event) {
      var type;
      type = this.getProxyType();
      this.el.find('.block').hide();
      return this.el.find("." + type + "_proxy_block").show();
    };

    ProfileDetail.prototype.getProxyType = function() {
      return this.proxyTypeButtonGroup.find(".selected").attr('href').substring(1);
    };

    ProfileDetail.prototype.deleteProfile = function(event) {
      var name, p;
      name = this.proxyNameEntry.val();
      p = Profile.getByName(name);
      if (p.length === 0) {
        return;
      }
      p = p[0];
      Profile.destroy(p.id);
      this.hide();
      return app.profileList.show();
    };

    ProfileDetail.prototype.switchAuth = function(event) {
      if (this.authToggle.prop('checked')) {
        return this.authBlock.show();
      } else {
        return this.authBlock.hide();
      }
    };

    ProfileDetail.prototype.save = function(event) {
      var act, bypass, name, p;
      act = this.actionId.val();
      p = null;
      if (act === 'add') {
        p = new Profile();
        p.name = $.trim(this.proxyNameEntry.val());
        p.selected = false;
        p.testlink = "";
      } else {
        name = $.trim(this.proxyNameEntry.val());
        p = Profile.getByName(name);
        if (p.length === 0) {
          Logging.error("Error: no such a profile named `" + name + "`");
          return;
        }
        p = p[0];
      }
      p.type = this.getProxyType();
      p.scheme = this.schemeCombo.val();
      p.pac_url = $.trim(this.pacUrlEntry.val());
      p.host = $.trim(this.hostEntry.val());
      p.port = $.trim(this.portEntry.val());
      bypass = $.trim(this.bypassEntry.val());
      if (bypass.length === 0) {
        p.bypass = [];
      } else {
        p.bypass = bypass.split(',').map(function(x) {
          return x.trim();
        });
      }
      p.use_auth = $('.auth_proxy_toggle').prop('checked');
      p.username = $.trim(this.usernameEntry.val());
      p.password = this.passwordEntry.val();
      p.save();
      if (localStorage.getItem('selected') === p.name && app.state) {
        Agent.enable(p.name);
      }
      this.hide();
      return app.profileList.show();
    };

    ProfileDetail.prototype.discard = function() {
      this.hide();
      return app.profileList.show();
    };

    ProfileDetail.prototype.setProfile = function(profile) {
      this.el.find('.block').hide();
      this.el.find("." + profile.type + "_proxy_block").show();
      this.actionId.val('edit');
      this.deleteButton.css('visibility', 'visible');
      this.proxyNameEntry.val(profile.name).prop('disabled', true);
      this.proxyTypeButtonGroup.find('.selected').removeClass('selected');
      this.proxyTypeButtonGroup.find("a[href=\#" + profile.type + "]").addClass('selected');
      this.schemeCombo.val(profile.scheme);
      this.pacUrlEntry.val(profile.pac_url);
      this.hostEntry.val(profile.host);
      this.portEntry.val(profile.port);
      this.authToggle.attr('checked', profile.use_auth);
      this.authToggle.prop('checked', profile.use_auth);
      if (profile.use_auth) {
        this.authBlock.show();
      } else {
        this.authBlock.hide();
      }
      this.bypassEntry.val(profile.bypass);
      this.usernameEntry.val(profile.username);
      return this.passwordEntry.val(profile.password);
    };

    ProfileDetail.prototype.reset = function() {
      this.el.find('.block').hide();
      this.el.find(".off_proxy_block").show();
      this.actionId.val('add');
      this.deleteButton.css('visibility', 'hidden');
      this.proxyNameEntry.val("").prop('disabled', false);
      this.proxyTypeButtonGroup.find("a[href=off]").addClass('selected');
      this.pacUrlEntry.val("");
      this.hostEntry.val("");
      this.portEntry.val("");
      this.authToggle.attr('checked', false).prop('checked', false);
      this.authBlock.hide();
      this.bypassEntry.val("<local>");
      this.usernameEntry.val("");
      return this.passwordEntry.val("");
    };

    ProfileDetail.prototype.toggleAuth = function(event) {
      if (this.authToggle.prop('checked')) {
        return this.authBlock.show();
      } else {
        return this.authBlock.hide();
      }
    };

    ProfileDetail.prototype.show = function() {
      return this.el.show();
    };

    ProfileDetail.prototype.hide = function() {
      return this.el.hide();
    };

    return ProfileDetail;

  })(Spine.Controller);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ProfileDetail = ProfileDetail;

}).call(this);
