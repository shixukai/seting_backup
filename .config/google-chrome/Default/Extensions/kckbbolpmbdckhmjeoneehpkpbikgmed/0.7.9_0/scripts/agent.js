// Generated by CoffeeScript 1.8.0
(function() {
  var Agent, root;

  Agent = (function() {
    function Agent() {}

    Agent.enable = function(name) {
      var e, profile;
      profile = Profile.getByName(name);
      if (profile.length !== 0) {
        profile = profile[0];
        try {
          Logging.info("Enable Proxy: `" + profile.name + "`, " + profile.type);
          if (profile.type === 'auto') {
            Agent.enableProxyAuto(profile);
          } else if (profile.type === 'manual') {
            Agent.enableProxyManual(profile);
          } else if (profile.type === 'system') {
            Agent.enableProxySystem(profile);
          } else {
            Agent.setIcon('off');
            return;
          }
          if (profile.scheme === 'https') {
            Agent.setIcon('on_sec');
            return Agent.setConnStat(name);
          } else {
            Agent.setIcon('on');
            return Agent.setConnStat(name);
          }
        } catch (_error) {
          e = _error;
          Logging.error(e);
          return Agent.setIcon('off');
        }
      }
    };

    Agent.getGlobalSettings = function() {
      var settings;
      settings = localStorage.getItem("Settings");
      if (settings) {
        settings = JSON.parse(settings);
      }
      if (!settings) {
        settings = {};
      }
      return settings;
    };

    Agent.enableProxyManual = function(profile) {
      var bypass, config, settings;
      settings = this.getGlobalSettings();
      bypass = profile.bypass || [];
      if (settings.bypass && settings.enableBypass) {
        bypass = bypass.concat(settings.bypass.split(","));
      }
      if (settings.ignoreBypass) {
        bypass = [];
      }
      if (profile.use_auth) {
        chrome.runtime.sendMessage({
          msg: 'set_auth',
          profile: profile
        }, function() {});
      }
      config = {
        mode: "fixed_servers",
        rules: {
          singleProxy: {
            scheme: profile.scheme,
            host: profile.host,
            port: parseInt(profile.port)
          },
          bypassList: bypass
        }
      };
      return chrome.proxy.settings.set({
        value: config,
        scope: 'regular'
      }, function() {
        if (profile.use_auth) {
          return app.fakeHTTPAuth(profile);
        }
      });
    };

    Agent.enableProxyAuto = function(profile) {
      var setProxy;
      setProxy = function(pac_url) {
        var config;
        config = {
          mode: "pac_script",
          pacScript: {
            url: pac_url
          }
        };
        return chrome.proxy.settings.set({
          value: config,
          scope: 'regular'
        }, function() {});
      };
      return $.ajax({
        url: profile.pac_url,
        cache: false
      }).done(function(data, textStatus, jqXHR) {
        return setProxy(profile.pac_url);
      }).fail(function(jqXHR, txt, err) {
        return setProxy(profile.pac_url);
      });
    };

    Agent.enableProxySystem = function() {
      var config;
      config = {
        mode: "system"
      };
      return chrome.proxy.settings.set({
        value: config,
        scope: 'regular'
      }, function() {
        return Agent.setIcon('off_alt');
      });
    };

    Agent.disable = function() {
      var config;
      config = {
        mode: "direct"
      };
      return chrome.proxy.settings.set({
        value: config,
        scope: 'regular'
      }, function() {
        return Agent.setIcon('off');
      });
    };

    Agent.setIcon = function(name) {
      chrome.runtime.sendMessage({
        msg: 'set_icon',
        name: name
      }, function() {});
    };

    Agent.setConnStat = function(name) {
      chrome.runtime.sendMessage({
        msg: 'set_conn_stat',
        name: name
      }, function() {});
    };

    return Agent;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Agent = Agent;

}).call(this);
